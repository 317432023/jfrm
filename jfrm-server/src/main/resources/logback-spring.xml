<?xml version="1.0" encoding="UTF-8" ?>

<!-- 级别从高到低 OFF 、 FATAL 、 RollingFileError 、 WARN 、 INFO 、 DEBUG 、 TRACE 、 ALL -->
<!-- 日志输出规则 根据当前ROOT 级别，日志输出时，级别高于root默认的级别时 会输出 -->
<!-- 以下 每个配置的 filter 是过滤掉输出文件里面，会出现高级别文件，依然出现低级别的日志信息，通过filter 过滤只记录本级别的日志 -->
<!-- scan 当此属性设置为true时，配置文件如果发生改变，将会被重新加载，默认值为true。 -->
<!-- scanPeriod 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当scan为true时，此属性生效。默认的时间间隔为1分钟。 -->
<!-- debug 当此属性设置为true时，将打印出logback内部日志信息，实时查看logback运行状态。默认值为false。 -->
<configuration scan="true" scanPeriod="60 seconds" debug="false">

    <!-- 动态日志级别 -->
    <jmxConfigurator/>

    <!-- 注意: 由于logback.xml加载过早无法使用springboot属性，使用logback-spring.xml进而可以使用springProfile、springProperty -->
    <!-- 读取属性： 用spring.application.name 来生成日志文件名
      scope：作用域
      name：在 logback-spring.xml 使用的键
      source：application.properties 文件中的键
      defaultValue：默认值
     -->
    <springProperty scope="context" name="appName" source="spring.application.name" defaultValue="myapp"/>


    <!--*****************************************************************************-->
    <!--自定义项 开始-->
    <!--*****************************************************************************-->

    <!-- 定义日志文件 输出位置 -->
    <property name="log.app_name" value="${appName}"/>
    <property name="log.home_dir" value="/data/applogs/${log.app_name}/logs"/>
    <!-- 日志级别 -->
    <property name="log.rootLevel" value="info"/>
    <!-- 日志最大的历史 30天 -->
    <property name="log.maxHistory" value="30"/>
    <!-- 当天的日志大小 超过MaxFileSize时,压缩日志并保存 -->
    <property name="log.maxSize" value="10MB"/>

    <!-- 彩色日志 -->
    <!-- 配置格式变量：Console_LOG_PATTERN 彩色日志格式 -->
    <!-- magenta:洋红 -->
    <!-- boldMagenta:粗红-->
    <!-- cyan:青色 -->
    <!-- white:白色 -->
    <!-- magenta:洋红 -->
    <!--
        参考网址：https://www.cnblogs.com/sxdcgaq8080/p/7886251.html
        官网说明：https://logback.qos.ch/manual/layouts.html#ClassicPatternLayout

        %logger 日志名字，一般采用日志所在类名或者包名做日志名 %logger、%lo 和 %c 三种都表示日志名字
        %C　　   类名%C = %class
        %d      时间%d = %data
        %F      发出日志请求的java源文件名字 %F = %file
        %L      日志请求的行号 %L = %line
        %m      日志正文信息 %m = %msg = %message
        %M      日志请求发出的方法的方法名 %M = %method
        %n      换行符
        %level  日志级别 %p = %le = %level
        %r      从程序运行到本条日志打印出来  的毫秒数 %r = %relative
        %t      本条日志所在线程名字 %t = %thread
        %i      这个在官方文档没有，但是它代表的是序号的意思
    -->
    <property name="Console_LOG_PATTERN"
              value="%yellow([%date{yyyyMMdd HH:mm:ss.SSS}]) %blue([%thread]) %highlight([%-4level]) %green(%logger{5}):%line %cyan(%msg%n)"/>
    <property name="File_LOG_PATTERN"
              value="[%date{yyyyMMdd HH:mm:ss.SSS}] [%thread] [%-4level] %logger{5}:%line %msg%n"/>
    <!--*****************************************************************************-->
    <!--自定义项 结束-->
    <!--*****************************************************************************-->

    <!-- ConsoleAppender 控制台输出日志 -->
    <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
        <encoder>
            <pattern>${Console_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 打印出所有级别的日志，这个log每次运行程序会自动清空，由append属性决定，适合临时测试用-->
    <appender name="Filelog" class="ch.qos.logback.core.FileAppender">
        <append>false</append>
        <file>${log.home_dir}/test.log</file>
        <encoder>
            <pattern>%date{yyyy-HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n</pattern>
        </encoder>
    </appender>

    <!-- INFO级别日志 appender -->
    <appender name="RollingFileInfo" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.home_dir}/info.log</file>
        <!-- 日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>INFO</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <fileNamePattern>${log.home_dir}/${log.app_name}-INFO-%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <maxFileSize>${log.maxSize}</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${File_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- WARN级别日志 appender -->
    <appender name="RollingFileWarn" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.home_dir}/warn.log</file>
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>WARN</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${log.home_dir}/${log.app_name}-WARN-%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
            <maxHistory>${log.maxHistory}</maxHistory>
            <!--当天的日志大小 超过MaxFileSize时,压缩日志并保存-->
            <maxFileSize>${log.maxSize}</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${File_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- ERROR级别日志 -->
    <!-- 滚动记录文件，先将日志记录到指定文件，当符合某个条件时，将日志记录到其他文件 RollingFileAppender -->
    <appender name="RollingFileError" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <file>${log.home_dir}/error.log</file>
        <!-- 过滤器，只记录ERROR级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!-- 设置过滤级别 -->
            <level>ERROR</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <onMatch>ACCEPT</onMatch>
            <!-- 用于配置不符合过滤条件的操作 -->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!-- 最常用的滚动策略，它根据时间来制定滚动策略.既负责滚动也负责触发滚动 -->
        <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
            <!--日志输出位置 可相对、和绝对路径 -->
            <fileNamePattern>${log.home_dir}/${log.app_name}-ERROR-%d{yyyy-MM-dd}_%i.log.gz</fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件,假设设置每个月滚动，且<maxHistory>是6，
            则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${log.maxHistory}</maxHistory>
            <!--日志文件最大的大小-->
            <maxFileSize>${log.maxSize}</maxFileSize>
        </rollingPolicy>
        <encoder>
            <pattern>${File_LOG_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 屏蔽掉spring和mybatis的一些无用的DEBUG信息 -->
    <!-- #注：当additivity设为false，则 子Logger 只会在自己的appender里输出，而不会在 父Logger 的appender里输出，此时若无appender-ref则相当于屏蔽日志。 -->
    <logger name="org.mybatis" level="info" additivity="false"/>
    <logger name="org.springframework.web" level="info" additivity="false"/>

    <!-- root级别 -->
    <root>
        <!-- 打印某某级别日志及以上级别日志 -->
        <level value="${log.rootLevel}"/>
        <!-- 控制台输出日志 -->
        <appender-ref ref="Console"/>
        <!-- 生产环境若有记录控制台日志则不需要 Filelog 日志 -->
        <appender-ref ref="Filelog"/>
        <appender-ref ref="RollingFileInfo"/>
        <appender-ref ref="RollingFileWarn"/>
        <appender-ref ref="RollingFileError"/>
    </root>

    <!-- Begin: SQL 日志输出（生产环境最好要关闭）注意：mybatis 和 具体包dao/mapper层 都使用DEBUG才能写SQL日志 -->
    <logger name="com.baomidou.mybatisplus" level="DEBUG" additivity="false">
        <appender-ref ref="Console"/>
    </logger>
    <logger name="com.apache.ibatis" level="DEBUG" additivity="false">
        <appender-ref ref="Console"/>
    </logger>
    <logger name="java.sql.Connection" level="DEBUG" additivity="false">
        <appender-ref ref="Console"/>
    </logger>
    <logger name="java.sql.Statement" level="DEBUG" additivity="false">
        <appender-ref ref="Console"/>
    </logger>
    <logger name="java.sql.PreparedStatement" level="DEBUG" additivity="false">
        <appender-ref ref="Console"/>
    </logger>
    <!-- 具体包 cmpt... -->

    <!-- 具体包 xxx... -->

    <!-- End: SQL 日志输出（生产环境最好要关闭）注意：mybatis 和 具体包dao/mapper层 都使用DEBUG才能写SQL日志 -->
</configuration>
